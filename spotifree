#!/bin/bash

set -e

for cmd in yt-dlp mpv; do
  command -v $cmd >/dev/null 2>&1 || { echo "$cmd is required but not installed. Aborting."; exit 1; }
done

TARGET_DIR="$HOME/Music"
TMP_DIR="/tmp/ytmp3"
mkdir -p "$TMP_DIR" "$TARGET_DIR"

# Cache variables
LAST_STREAM_URL=""
LAST_QUERY=""
declare -A SONG_CACHE
HISTORY=()
CACHE_LIMIT=20
LOOP_MODE=false

# Display management
HEADER_LINES=8  # Number of lines in the header

clear_content() {
  tput cup $HEADER_LINES 0
  tput ed
}

print_header() {
  # Move to top but don't clear entire terminal
  tput cup 0 0
  echo "                            ____           __   _  ___                                       "
  echo "  ____ ____ ____ ____      / __/___  ___  / /_ (_)/ _/____ ___  ___       ____ ____ ____ ____"
  echo " /___//___//___//___/     _\ \ / _ \/ _ \/ __// // _// __// -_)/ -_)     /___//___//___//___/"
  echo "/___//___//___//___/     /___// .__/\___/\__//_//_/ /_/   \__/ \__/     /___//___//___//___/ "
  echo "                             /_/                                                             "
  echo "---------------------------------------------------------------------------------------------"
  echo "                                 Your free CLI Music Streamer                                "
  echo "---------------------------------------------------------------------------------------------"
  echo
}

print_mpv_controls() {
  echo "                         ===========[ PLAYBACK CONTROLS ]==========="
  echo "                                Space      : Play/Pause"
  echo "                                ←/→        : Seek -/+ 5 seconds"
  echo "                                ↓/↑        : Seek -/+ 1 minute"
  echo "                                9/0        : Volume down/up"
  echo "                                m          : Mute toggle"
  echo "                                q          : Quit player"
  echo "                         ==========================================="
  echo
}

refresh_input_prompt() {
  tput cup $((HEADER_LINES + 1)) 0
  tput ed
  echo "Enter song name (or 'q' to quit, 'r' to repeat, 'h' for history, 'd' to download last song):"
  echo "(Add '-r' at the end for loop play. For playlists, write song names separated by commas)"
  echo -n ">>> "
}

play_stream() {
  local stream_url="$1"
  local loop="$2"
  
  clear_content
  print_mpv_controls
  if [ "$loop" = true ]; then
    echo "Loop mode activated"
  fi
  
  if [ "$loop" = true ]; then
    mpv --no-video --loop "$stream_url"
  else
    mpv --no-video "$stream_url"
  fi
  
  # Restore interface after playback
  print_header
  refresh_input_prompt
}

add_to_history() {
  local query="$1"
  local url="$2"
  
  local clean_query="${query%% -r}"
  
  if [[ -z "${SONG_CACHE[$clean_query]}" ]]; then
    SONG_CACHE["$clean_query"]="$url"
    HISTORY+=("$clean_query")
    
    if [[ ${#HISTORY[@]} -gt $CACHE_LIMIT ]]; then
      local oldest_query="${HISTORY[0]}"
      unset SONG_CACHE["$oldest_query"]
      HISTORY=("${HISTORY[@]:1}")
    fi
  fi
}

show_history() {
  clear_content
  
  if [[ ${#HISTORY[@]} -eq 0 ]]; then
    echo "No songs in history yet!"
    sleep 2
    return 1
  fi
  
  echo "                         =========[ Recently Played (Last $CACHE_LIMIT) ]========="
  for i in "${!HISTORY[@]}"; do 
    echo "                                       $((i+1)). ${HISTORY[$i]}"
  done
  echo "                         ===============================================     "
  
  echo -ne "Enter number to replay (or any key to cancel): "
  read -r choice
  
  if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le ${#HISTORY[@]} ]]; then
    local selected_query="${HISTORY[$((choice-1))]}"
    clear_content
    echo -n "Replay options: [1] Normal  [2] Loop  [3] Cancel: "
    read -r mode
    
    case "$mode" in
      1)
        echo "Playing: $selected_query"
        LAST_STREAM_URL="${SONG_CACHE[$selected_query]}"
        LAST_QUERY="$selected_query"
        play_stream "${SONG_CACHE[$selected_query]}" false
        ;;
      2)
        echo "Looping: $selected_query"
        LAST_STREAM_URL="${SONG_CACHE[$selected_query]}"
        LAST_QUERY="$selected_query"
        play_stream "${SONG_CACHE[$selected_query]}" true
        ;;
      *)
        echo "Cancelled."
        ;;
    esac
  else
    echo "Cancelled."
  fi
  
  refresh_input_prompt
  return 0
}

download_last() {
  clear_content
  
  if [ -z "$LAST_STREAM_URL" ]; then
    echo "No song to download! Please play a song first."
    sleep 2
    return 1
  fi

  echo "Downloading: $LAST_QUERY , please wait..."
  echo "Destination: $TARGET_DIR"
  
  clean_title=$(echo "$LAST_QUERY" | tr -dc '[:alnum:][:space:]' | tr ' ' '_')
  temp_file="${TMP_DIR}/${clean_title}.webm"
  final_file="${TARGET_DIR}/${clean_title}.mp3"

  yt-dlp --quiet --no-warnings -f bestaudio -o "$temp_file" "$LAST_STREAM_URL" || {
    echo "Download failed!"
    [ -f "$temp_file" ] && rm "$temp_file"
    sleep 2
    return 1
  }

  echo -n "Converting to MP3..."
  ffmpeg -v quiet -stats -i "$temp_file" -vn -acodec libmp3lame -q:a 2 "$final_file" && {
    echo " Done!"
    rm "$temp_file"
    echo "Successfully downloaded: $final_file"
    sleep 2
    return 0
  } || {
    echo "Conversion failed!"
    [ -f "$temp_file" ] && rm "$temp_file"
    [ -f "$final_file" ] && rm "$final_file"
    sleep 2
    return 1
  }
}

process_song() {
  local query="$1"
  local loop=false
  
  if [[ "$query" == *" -r" ]]; then
    loop=true
    query="${query%% -r}"
  fi

  clear_content
  echo "Searching and streaming: $query"
  
  stream_url=$(yt-dlp -f bestaudio -g "ytsearch1:$query") || {
    echo "No results found for: $query"
    sleep 2
    return 1
  }

  if [ -z "$stream_url" ]; then
    echo "No results found for: $query"
    sleep 2
    return 1
  fi

  LAST_STREAM_URL="$stream_url"
  LAST_QUERY="$query"
  add_to_history "$query" "$stream_url"
  
  play_stream "$stream_url" "$loop"
  return 0
}

main_loop() {
  # Initial setup
  print_header
  refresh_input_prompt
  
  while true; do
    read -r input
    
    case "$input" in
      q)
        exit 0
        ;;
      r)
        if [ -z "$LAST_STREAM_URL" ]; then
          clear_content
          echo "No song to repeat! Please search for a song first."
          sleep 2
          refresh_input_prompt
          continue
        fi
        
        clear_content
        echo -n "Repeat options: [1] Normal  [2] Loop  [3] Cancel: "
        read -r mode
        
        case "$mode" in
          1)
            echo "Repeating: $LAST_QUERY"
            play_stream "$LAST_STREAM_URL" false
            ;;
          2)
            echo "Looping: $LAST_QUERY"
            play_stream "$LAST_STREAM_URL" true
            ;;
          *)
            echo "Cancelled."
            ;;
        esac
        refresh_input_prompt
        ;;
      h)
        show_history
        ;;
      d)
        if ! download_last; then
          refresh_input_prompt
          continue
        fi
        refresh_input_prompt
        ;;
      *)
        if [[ "$input" == *,* ]]; then
          IFS=',' read -ra songs <<< "$input"
          for song in "${songs[@]}"; do
            song=$(echo "$song" | xargs)
            [ -z "$song" ] && continue
            process_song "$song"
          done
        else
          process_song "$input"
        fi
        refresh_input_prompt
        ;;
    esac
  done
}

main_loop
